package servidor;
import biblioteca.*;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.net.Socket;


public class HiloBiblioteca implements Runnable{
	private int numCliente = 0;
	private Thread hilo;
	private Socket socketAlCliente;
	private Biblioteca biblioteca;
	
	public HiloBiblioteca(Socket socketAlCliente, Biblioteca biblioteca) {
		numCliente++;
		hilo = new Thread(this, "Cliente_" + numCliente);
		this.socketAlCliente = socketAlCliente;
		hilo.start();
		this.biblioteca=biblioteca;
	}
			
	public void run(){
		System.out.println("Estableciendo comunicacion con " + hilo.getName());
		PrintStream salida = null;
		InputStreamReader entrada = null;
		BufferedReader entradaBuffer = null;
		
		try {
			
			salida = new PrintStream(socketAlCliente.getOutputStream());
			entrada = new InputStreamReader(socketAlCliente.getInputStream());
			entradaBuffer = new BufferedReader(entrada);
			
			String texto = "";
			boolean continuar = true;
			
			while (continuar) {
				texto = entradaBuffer.readLine();
				String[] order = texto.split("-");
				int instruction = Integer.parseInt(order[0]);
				String x = order[1];
				switch(instruction) {
				case 1:
					salida = new PrintStream(socketAlCliente.getOutputStream());
					System.out.println("SERVIDOR: El resultado: " + biblioteca.findTitulo(x).toString());
					salida.println(biblioteca.findIsbn(x).toString());
					break;
				case 2:
					salida = new PrintStream(socketAlCliente.getOutputStream());
					System.out.println("SERVIDOR: El resultado: " + biblioteca.findIsbn(x).toString());
					salida.println(biblioteca.findIsbn(x).toString());
					break;
				case 3:
					break;
				case 4:
					break;
				default:
					salida.println("No");
					break;
				}
			}
		
	} catch (IOException e) {
		System.err.println("SERVIDOR: Error de entrada/salida");
		e.printStackTrace();
	} catch (Exception e) {
		System.err.println("SERVIDOR: Error");
		e.printStackTrace();
	}
		
	}
	

}
