package cliente;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.Scanner;

public class SocketClienteBiblioteca {
	
	public static final int PUERTO = 2019;
	public static final String IP_SERVER = "localhost";
	

	public static void main(String[] args) {
		System.out.println("APLICACIÓN BIBLIOTECA");
		System.out.println("-------------------");
		
		InetSocketAddress direccionServidor = new InetSocketAddress(IP_SERVER, PUERTO);
		
		try (Scanner scan = new Scanner(System.in)){
			
			System.out.println("CLIENTE: Esperando a que el servidor acepte la conexión");
			Socket socketAlServidor = new Socket();
			socketAlServidor.connect(direccionServidor);
			System.out.println("CLIENTE: Conexion establecida... a " + IP_SERVER + 
					" por el puerto " + PUERTO);
			
			InputStreamReader entrada = new InputStreamReader(socketAlServidor.getInputStream());
			BufferedReader entradaBuffer = new BufferedReader(entrada);
			
			PrintStream salida = new PrintStream(socketAlServidor.getOutputStream());
			String in ="";
			boolean continuar = true;
			
			do {
				Menu.menu1();
				in = scan.nextLine();
				switch(Integer.parseInt(in)) {
				case 0:
					continuar = false;
					break;
				case 1:
					String titulo = scan.nextLine();
					salida.println("1" +"-"+ titulo);
					System.out.println("CLIENTE: Esperando respuesta: Introduzca Titulo ...... ");				
					String respuesta = entradaBuffer.readLine();
					System.out.println("CLIENTE: Servidor responde, este es el libro: " + respuesta);
					break;
				case 2:
					String isbn = scan.nextLine();
					salida.println("2" +"-"+ isbn);
					System.out.println("CLIENTE: Esperando respuesta Introduzca ISBN...... ");				
					String respuesta2 = entradaBuffer.readLine();
					System.out.println("CLIENTE: Servidor responde, este es el libro: " + respuesta2);
					break;
				case 3:
					break;
				case 4:
					break;
				default:
					System.out.println("Instrucción invalida");
				break;			
				
				}				
			}while(continuar);
			socketAlServidor.close();
		} catch (UnknownHostException e) {
			System.err.println("CLIENTE: No encuentro el servidor en la dirección" + IP_SERVER);
			e.printStackTrace();
		} catch (IOException e) {
			System.err.println("CLIENTE: Error de entrada/salida");
			e.printStackTrace();
		} catch (Exception e) {
			System.err.println("CLIENTE: Error -> " + e);
			e.printStackTrace();
		}
		
		System.out.println("CLIENTE: Fin del programa");
	}
					

	}
